/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/api/v1/auth/login/credentials": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login user
     * @description Get a JWT token for a user by username or email and password
     */
    post: operations["AuthController_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/login/social/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AuthController_googleAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/login/social/google/redirect": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AuthController_googleAuthRedirect"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh JWT token
     * @description Refresh the JWT token
     */
    post: operations["AuthController_refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register user
     * @description Register a new user with username, email, and password
     */
    post: operations["AuthController_register"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get status
     * @description Get the status of the API
     */
    get: operations["AuthController_getStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/follow": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all profiles that the current user is following
     * @description Returns an array of profiles that the current user is following.
     */
    get: operations["FollowController_getMineFollowing"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/follow/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Unfollow a profile
     * @description Unfollow a profile by providing the profile ID.
     */
    delete: operations["FollowController_unfollowProfile"];
    options?: never;
    head?: never;
    /**
     * Follow a profile
     * @description Follow a profile by providing the profile ID.
     */
    patch: operations["FollowController_followProfile"];
    trace?: never;
  };
  [path: `/api/v1/follow/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all profiles that a user is following
     * @description Returns an array of profiles a user is following.
     */
    get: operations["FollowController_getFollowing"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/mail/welcome": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["MailController_welcomeEmail"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/password-reset/${string}/request`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sends a password reset email
     * @description Sends a password reset email to the user with the provided email
     */
    post: operations["ResetPasswordController_request"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/password-reset/update-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update password
     * @description Update the password of the user with the provided token and new password
     */
    patch: operations["ResetPasswordController_updatePassword"];
    trace?: never;
  };
  "/api/v1/profile/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all profiles
     * @description Returns an array of all profiles.
     */
    get: operations["ProfileController_findAllProfiles"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/role/${string}/roles/add/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Add a role to user
     * @description Adds a role to a single user with a matching id. Only Admins can do this. You will need to login again to see the changes.
     */
    patch: operations["RolesController_addRole"];
    trace?: never;
  };
  [path: `/api/v1/role/${string}/roles/delete/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Deletes a role to user
     * @description Deletes a role to a single user with a matching id. Only Admins can do this. You will need to login again to see the changes.
     */
    patch: operations["RolesController_removeRole"];
    trace?: never;
  };
  [path: `/api/v1/saved-trips/${string}/add`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Add trips to a saved folder
     * @description Adds multiple (or one) trips to a saved folder.
     */
    patch: operations["SavedTripsController_addTripToFolder"];
    trace?: never;
  };
  [path: `/api/v1/saved-trips/${string}/remove`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Remove a trips reference from a saved folder
     * @description Removes multiple (or one) trips from a saved folder.
     */
    patch: operations["SavedTripsController_removeTripFromFolder"];
    trace?: never;
  };
  [path: `/api/v1/saved-trips/folder/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a saved list by its id
     * @description Returns a single saved list with a matching id.
     */
    get: operations["SavedTripsController_listSavedTripFolders"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/saved-trips/folder/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Deletes a saved trip folder
     * @description Deletes a saved trip folder for a profile.
     */
    delete: operations["SavedTripsController_deleteSavedTripFolder"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/saved-trips/folder/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Creates a saved trip folder
     * @description Creates a saved trip folder for a profile.
     */
    post: operations["SavedTripsController_createSavedTripFolder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/saved-trips/folders/mine": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List saved trip folders
     * @description Lists all saved trip folders for the profile.
     */
    get: operations["SavedTripsController_listMineSavedTripFolders"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/temporal-tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["TemporalTokenController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/temporal-tokens/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["TemporalTokenController_findOne"];
    put: operations["TemporalTokenController_update"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/trip": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all trips
     * @description Returns an array of all trips. Supports pagination
     */
    get: operations["TripController_getAll"];
    put?: never;
    /**
     * Create a new trip
     * @description Creates a new trip with the provided data
     */
    post: operations["TripController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/trip-user/${string}/add/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Add a user to a trip
     * @description Add a user to a trip
     */
    patch: operations["TripUserController_addParticipant"];
    trace?: never;
  };
  [path: `/api/v1/trip-user/${string}/add/me`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Add the current logged in user to a trip
     * @description Add the current logged in user to a trip
     */
    patch: operations["TripUserController_addMeToTrip"];
    trace?: never;
  };
  [path: `/api/v1/trip-user/${string}/remove/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Remove a user from a trip
     * @description Remove a user from a trip
     */
    patch: operations["TripUserController_removeParticipant"];
    trace?: never;
  };
  [path: `/api/v1/trip-user/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all trips
     * @description Returns an array of all trips. Supports pagination
     */
    get: operations["TripUserController_getTripsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/trip-user/mine": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all trips for the current user
     * @description Returns an array of all trips where the current user is a traveler
     */
    get: operations["TripUserController_getMyTrips"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/trip/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a trip by ID
     * @description Returns a trip with the provided ID
     */
    get: operations["TripController_findOne"];
    put?: never;
    post?: never;
    /**
     * Deletes a trip
     * @description Deletes a trip with the provided ID
     */
    delete: operations["TripController_remove"];
    options?: never;
    head?: never;
    /**
     * Update a trip
     * @description Updates a trip with the provided ID and data
     */
    patch: operations["TripController_update"];
    trace?: never;
  };
  "/api/v1/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all users
     * @description Returns an array of all users. Supports pagination
     */
    get: operations["UserController_getUsers"];
    put?: never;
    /**
     * Create user
     * @description Creates a new user.
     */
    post: operations["UserController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/user/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user by id
     * @description Returns a single user with a matching id.
     */
    get: operations["UserController_findOneUser"];
    put?: never;
    post?: never;
    /**
     * Delete user by id
     * @description Deletes a single user with a matching id.
     */
    delete: operations["UserController_delete"];
    options?: never;
    head?: never;
    /**
     * Update user by id
     * @description Updates a single user with a matching id.
     */
    patch: operations["UserController_update"];
    trace?: never;
  };
  [path: `/api/v1/user/${string}/profile`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user profile by id
     * @description Returns a single user with profile with a matching id.
     */
    get: operations["UserController_findOneWithProfile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/user/${string}/raw`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a complete user by id
     * @description Returns the complete user with a matching id.
     */
    get: operations["UserController_findOneRaw"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/check2": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user  by username or email
     * @description Returns a single user with a matching username or email.
     */
    get: operations["UserController_checkIfUsernameExists"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/mine/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get logged-in user profile
     * @description Returns the profile of the logged-in user.
     */
    get: operations["UserController_findMineUserWithProfile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/multiple": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create multiple users
     * @description Creates multiple users.
     */
    post: operations["UserController_createMultiple"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  [path: `/api/v1/validate-email/${string}`]: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Updates the verification date of the email
     * @description Updates the verification date of the email to the current date
     */
    patch: operations["ValidateEmailController_updateVerifyEmail"];
    trace?: never;
  };
  "/api/v1/validate-email/request": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sends a password reset email
     * @description Sends a password reset email to the user with the provided email
     */
    post: operations["ValidateEmailController_request"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    BadRequestException: Record<string, never>;
    CreateSavedTripFolderDto: {
      /**
       * @description Name of the saved trip folder
       * @example Summer Vacations
       */
      name: string;
      /**
       * @description Array of trips ids to be added to the folder
       * @example [
       *       "66b0bc855e33e160ca963d3e"
       *     ]
       */
      tripIds: string[];
    };
    CreateTemporalTokenDto: Record<string, never>;
    CreateTripDto: {
      /**
       * @description The budget of the trip, only 1 accepted.
       * @default affordable
       */
      budget: string[];
      /**
       * Name
       * @description Long description of the trip, including the purpose of the trip, the places to visit, and the activities to do.
       * @default A complete week of fun and relaxation at the beach.
       */
      description: string;
      /**
       * @description The date when the last day of the trip is planned to end.
       * @default 2024-06-10T00:00:00.000Z
       */
      endDate: string;
      /**
       * @description Expenses associated with the event.
       * @default []
       */
      expenses: components["schemas"]["Expense"][];
      /**
       * @description The logistics of the trip, encompassing the mode of transport and types of accommodation.
       * @default [
       *       "camper"
       *     ]
       */
      logistics: string[];
      /** @description Type of mood, experience user is looking for with the trip. */
      moods?: CreateTripDtoMoods[];
      /**
       * Name
       * @description A short name for the trip, just to label it in a user-friendly way.
       * @default A summer trip to the beach
       */
      name: string;
      /** @description Array of possible purposes to filter trips */
      purposes?: CreateTripDtoPurposes[];
      /**
       * @description The date when the first day of the trip is planned to start.
       * @default 2024-06-01T00:00:00.000Z
       */
      startDate: string;
      /**
       * @description Link to the main image of the trip.
       * @default https://example.com/image.jpg
       */
      thumbnail: string;
      /**
       * @description List of user emails that will participate in the trip.
       * @default []
       */
      travelers: string[];
    };
    CreateUserDto: {
      /**
       * @description The email of a user.
       * @default
       */
      email: string;
      /**
       * @description The password of a user.
       * @default
       */
      password: string;
      /**
       * @description The unique username for a user.
       * @default
       */
      username: string;
    };
    Day: Record<string, never>;
    DeleteTripsToFolderDto: {
      /**
       * @description Array of trip IDs in list to be added to the folder
       * @example [
       *       "123456789012345678901234"
       *     ]
       */
      tripIds: string[];
    };
    Error: Record<string, never>;
    Expense: Record<string, never>;
    LoginDto: {
      /**
       * @description The password of a user.
       * @default
       */
      password: string;
      /**
       * @description The unique username or email for a user.
       * @default pepsanchis
       */
      usernameOrEmail: string;
    };
    ObjectId: Record<string, never>;
    PageDto: {
      data: unknown[][];
      meta: components["schemas"]["PageMetaDto"];
    };
    PageMetaDto: {
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      itemCount: number;
      page: number;
      pageCount: number;
      take: number;
    };
    ProfileDetailsDto: {
      /**
       * Avatar
       * @description Avatar photo
       * @default null
       */
      avatar: string;
      /**
       * @description Short biography of the profile owner, including the name, age interests...
       * @default I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.
       */
      bio: Record<string, never>;
      /**
       * @description The family name of the profile
       * @default Einstein
       */
      familyName: Record<string, never>;
      /**
       * @description Array of id from users that follows you
       * @default [
       *       "Albert",
       *       "John",
       *       "Doe"
       *     ]
       */
      followers: Record<string, never>;
      /**
       * @description Users id who you follow
       * @default [
       *       "Albert",
       *       "John",
       *       "Doe"
       *     ]
       */
      following: Record<string, never>;
      /**
       * @description The first name of the profile
       * @default Albert
       */
      givenName: Record<string, never>;
      /**
       * @description The unique identifier the resource
       * @default 123456789012345678901234
       */
      id: string;
      /**
       * @description Array of folders with saved trips
       * @default []
       */
      savedTrips: components["schemas"]["SavedTripDetailsDto"][];
    };
    ResetPasswordDto: {
      /**
       * @description The new password for the user.
       * @default newPassword1.
       */
      newPassword: string;
      /**
       * @description The token sent to the user to reset the password.
       * @default 1568a4c5-4b3e-4b3e-8b3e-4b3e4b3e4b3e
       */
      token: string;
    };
    ResetPasswordResponseDto: {
      /**
       * @description A message indicating the result of the password reset
       * @default Password updated successfully
       */
      message: string;
    };
    SavedTripDetailsDto: {
      /**
       * @description The unique identifier the resource
       * @default 123456789012345678901234
       */
      id: string;
      /**
       * @description Name of the saved trip folder
       * @example Summer Vacations
       */
      name: string;
      /**
       * @description Array of trips in list to be added to the folder
       * @example [
       *       {
       *         "id": "60f5e7b3b7b3f3001d1f3e3d",
       *         "name": "A summer trip to the beach",
       *         "duration": "medium",
       *         "description": "A complete week of fun and relaxation at the beach.",
       *         "thumbnail": "https://example.com/image.jpg",
       *         "moods": [
       *           "party"
       *         ],
       *         "budget": "low",
       *         "purposes": [
       *           "alone",
       *           "party"
       *         ],
       *         "travelers": [
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "username": "John Doe",
       *             "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *             "avatar": "https://example.com/avatar.jpg"
       *           },
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "username": "Jane Doe",
       *             "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *             "avatar": "https://example.com/avatar.jpg"
       *           }
       *         ]
       *       }
       *     ]
       */
      trips: components["schemas"]["TripInListDto"][];
    };
    SavedTripDto: {
      /**
       * @description The unique identifier the resource
       * @default 123456789012345678901234
       */
      id: string;
      /**
       * @description Name of the saved trip folder
       * @example Summer Vacations
       */
      name: string;
      /**
       * @description Array of trip IDs in list to be added to the folder
       * @example [
       *       "123456789012345678901234"
       *     ]
       */
      tripIds: string[];
      /**
       * @description Array of trips in list to be added to the folder
       * @example [
       *       {
       *         "id": "60f5e7b3b7b3f3001d1f3e3d",
       *         "name": "A summer trip to the beach",
       *         "duration": "medium",
       *         "description": "A complete week of fun and relaxation at the beach.",
       *         "thumbnail": "https://example.com/image.jpg",
       *         "moods": [
       *           "party"
       *         ],
       *         "budget": "low",
       *         "purposes": [
       *           "alone",
       *           "party"
       *         ],
       *         "travelers": [
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "username": "John Doe",
       *             "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *             "avatar": "https://example.com/avatar.jpg"
       *           },
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "username": "Jane Doe",
       *             "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *             "avatar": "https://example.com/avatar.jpg"
       *           }
       *         ]
       *       }
       *     ]
       */
      trips: components["schemas"]["TripInListDto"][];
    };
    TokensDto: {
      /**
       * @description A JWT token string for accesing the API
       * @example eyJhbGciOiJIUzI1NiIsInR
       */
      accessToken: string;
      /**
       * @description A JWT token string for refreshing the authentication
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6Ik
       */
      refreshToken: string;
    };
    TripDetailsDto: {
      /**
       * @description Flag to indicate if the trip is active or not.
       * @default true
       */
      active: boolean;
      /**
       * @description A flag that indicates if you are part of the trip.
       * @default false
       */
      areYouMember: boolean;
      /**
       * @description The budget of the trip, only 1 accepted.
       * @default affordable
       */
      budget: string[];
      /**
       * Format: date-time
       * @description The date and time the trip was created.
       */
      createdAt: string;
      /** @description The user in list of the creator of the trip. */
      createdBy: string;
      /**
       * @description Days into the trip.
       * @default []
       */
      days: components["schemas"]["Day"][];
      /**
       * Name
       * @description Long description of the trip, including the purpose of the trip, the places to visit, and the activities to do.
       * @default A complete week of fun and relaxation at the beach.
       */
      description: string;
      /**
       * @description Duration of the trip in days.
       * @default [
       *       "short"
       *     ]
       */
      duration: string[];
      /**
       * @description Expenses associated with the event.
       * @default []
       */
      expenses: components["schemas"]["Expense"][];
      /**
       * @description The unique identifier the resource
       * @default 123456789012345678901234
       */
      id: string;
      /**
       * @description The logistics of the trip, encompassing the mode of transport and types of accommodation.
       * @default [
       *       "camper"
       *     ]
       */
      logistics: string[];
      /** @description Type of mood, experience user is looking for with the trip. */
      moods?: TripDetailsDtoMoods[];
      /**
       * Name
       * @description A short name for the trip, just to label it in a user-friendly way.
       * @default A summer trip to the beach
       */
      name: string;
      /**
       * @description Flag to indicate if the trip is public or not.
       * @default false
       */
      public: boolean;
      /** @description Array of possible purposes to filter trips */
      purposes?: TripDetailsDtoPurposes[];
      /**
       * @description Link to the main image of the trip.
       * @default https://example.com/image.jpg
       */
      thumbnail: string;
      /**
       * @description The list of user IDs that are part of the trip.
       * @default []
       */
      travelers: components["schemas"]["ObjectId"][];
      /**
       * Format: date-time
       * @description The date and time the trip was last updated.
       */
      updatedAt: string;
    };
    TripInListDto: {
      /**
       * @description The budget of the trip, only 1 accepted.
       * @default affordable
       */
      budget: string[];
      /**
       * Name
       * @description Long description of the trip, including the purpose of the trip, the places to visit, and the activities to do.
       * @default A complete week of fun and relaxation at the beach.
       */
      description: string;
      /**
       * @description Duration of the trip in days.
       * @default [
       *       "short"
       *     ]
       */
      duration: string[];
      /**
       * @description The unique identifier the resource
       * @default 123456789012345678901234
       */
      id: string;
      /** @description Type of mood, experience user is looking for with the trip. */
      moods?: TripInListDtoMoods[];
      /**
       * Name
       * @description A short name for the trip, just to label it in a user-friendly way.
       * @default A summer trip to the beach
       */
      name: string;
      /** @description Array of possible purposes to filter trips */
      purposes?: TripInListDtoPurposes[];
      /**
       * @description Link to the main image of the trip.
       * @default https://example.com/image.jpg
       */
      thumbnail: string;
      /**
       * @description The list of user IDs that are part of the trip.
       * @default []
       */
      travelers: components["schemas"]["ObjectId"][];
    };
    UpdateTemporalTokenDto: Record<string, never>;
    UpdateTripDto: {
      /**
       * @description Days into the trip.
       * @default []
       */
      days: components["schemas"]["Day"][];
      /**
       * Name
       * @description Long description of the trip, including the purpose of the trip, the places to visit, and the activities to do.
       * @default A complete week of fun and relaxation at the beach.
       */
      description: string;
      /**
       * @description Expenses associated with the event.
       * @default []
       */
      expenses: components["schemas"]["Expense"][];
      /**
       * @description The logistics of the trip, encompassing the mode of transport and types of accommodation.
       * @default [
       *       "camper"
       *     ]
       */
      logistics: string[];
      /** @description Type of mood, experience user is looking for with the trip. */
      moods?: UpdateTripDtoMoods[];
      /**
       * Name
       * @description A short name for the trip, just to label it in a user-friendly way.
       * @default A summer trip to the beach
       */
      name: string;
      /** @description Array of possible purposes to filter trips */
      purposes?: UpdateTripDtoPurposes[];
      /**
       * @description Link to the main image of the trip.
       * @default https://example.com/image.jpg
       */
      thumbnail: string;
      /**
       * @description The list of user IDs that are part of the trip.
       * @default []
       */
      travelers: components["schemas"]["ObjectId"][];
    };
    UpdateUserDto: {
      /**
       * @description The email of a user.
       * @default
       */
      email: string;
      /**
       * @description The unique username for a user.
       * @default
       */
      username: string;
    };
    UserDetailsDto: {
      /**
       * Format: date-time
       * @description The date and time the user was created.
       */
      createdAt: string;
      /**
       * @description The email of a user.
       * @default
       */
      email: string;
      /**
       * Format: date-time
       * @description The date and time the user email was verified.
       */
      emailVerified: string;
      /**
       * @description The unique identifier for a user.
       * @default
       */
      id: string;
      /**
       * @description The role of the user
       * @example admin
       * @enum {string}
       */
      roles: UserDetailsDtoRoles;
      /**
       * Format: date-time
       * @description The date and time the user was last updated.
       */
      updatedAt: string;
      /**
       * @description The unique username for a user.
       * @default
       */
      username: string;
    };
    UserInListDto: {
      /**
       * Avatar
       * @description Avatar photo
       * @default null
       */
      avatar: string;
      /**
       * @description The unique identifier for a user.
       * @default
       */
      id: string;
      /**
       * @description The unique username for a user.
       * @default
       */
      username: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensDto"];
        };
      };
    };
  };
  AuthController_googleAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensDto"];
        };
      };
    };
  };
  AuthController_googleAuthRedirect: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensDto"];
        };
      };
    };
  };
  AuthController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensDto"];
        };
      };
    };
  };
  AuthController_getStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  FollowController_getMineFollowing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  FollowController_unfollowProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        followeeProfileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  FollowController_followProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        followeeProfileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  FollowController_getFollowing: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MailController_welcomeEmail: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example tripelseapp@gmail.com */
          email?: string;
          /** @example tripelseapp */
          username?: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ResetPasswordController_request: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ResetPasswordController_updatePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
    responses: {
      /**
       * @description Password updated successfully
       * @example {
       *       "message": "Password updated successfully"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResetPasswordResponseDto"];
        };
      };
    };
  };
  ProfileController_findAllProfiles: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description Profiles found
       * @example [
       *       {
       *         "id": "60f7b3b3b3f1f3001f9e4b3b",
       *         "bio": "I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.",
       *         "avatar": "",
       *         "followers": [
       *           "user1",
       *           "user2",
       *           "user3"
       *         ],
       *         "following": [
       *           "user5",
       *           "user4"
       *         ],
       *         "givenName": "Albert",
       *         "familyName": "Einstein",
       *         "savedTrips": [
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "name": "Summer Vacations",
       *             "trips": [
       *               {
       *                 "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "name": "A summer trip to the beach",
       *                 "duration": "medium",
       *                 "description": "A complete week of fun and relaxation at the beach.",
       *                 "thumbnail": "https://example.com/image.jpg",
       *                 "moods": [
       *                   "party"
       *                 ],
       *                 "budget": "low",
       *                 "purposes": [
       *                   "alone",
       *                   "party"
       *                 ],
       *                 "travelers": [
       *                   {
       *                     "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                     "username": "John Doe",
       *                     "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                     "avatar": "https://example.com/avatar.jpg"
       *                   },
       *                   {
       *                     "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                     "username": "Jane Doe",
       *                     "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                     "avatar": "https://example.com/avatar.jpg"
       *                   }
       *                 ]
       *               }
       *             ]
       *           }
       *         ]
       *       }
       *     ]
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileDetailsDto"][];
        };
      };
    };
  };
  RolesController_addRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        role: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description User role updated
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "Invalid ID"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  RolesController_removeRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        role: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description User role updated
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "Invalid ID"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  SavedTripsController_addTripToFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        folderId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteTripsToFolderDto"];
      };
    };
    responses: {
      /**
       * @description Profile updated
       * @example {
       *       "id": "60f7b3b3b3f1f3001f9e4b3b",
       *       "bio": "I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.",
       *       "avatar": "",
       *       "followers": [
       *         "user1",
       *         "user2",
       *         "user3"
       *       ],
       *       "following": [
       *         "user5",
       *         "user4"
       *       ],
       *       "givenName": "Albert",
       *       "familyName": "Einstein",
       *       "savedTrips": [
       *         {
       *           "id": "60f5e7b3b7b3f3001d1f3e3d",
       *           "name": "Summer Vacations",
       *           "trips": [
       *             {
       *               "id": "60f5e7b3b7b3f3001d1f3e3d",
       *               "name": "A summer trip to the beach",
       *               "duration": "medium",
       *               "description": "A complete week of fun and relaxation at the beach.",
       *               "thumbnail": "https://example.com/image.jpg",
       *               "moods": [
       *                 "party"
       *               ],
       *               "budget": "low",
       *               "purposes": [
       *                 "alone",
       *                 "party"
       *               ],
       *               "travelers": [
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "John Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 },
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "Jane Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 }
       *               ]
       *             }
       *           ]
       *         }
       *       ]
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileDetailsDto"];
        };
      };
    };
  };
  SavedTripsController_removeTripFromFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        folderId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteTripsToFolderDto"];
      };
    };
    responses: {
      /**
       * @description Profile updated
       * @example {
       *       "id": "60f7b3b3b3f1f3001f9e4b3b",
       *       "bio": "I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.",
       *       "avatar": "",
       *       "followers": [
       *         "user1",
       *         "user2",
       *         "user3"
       *       ],
       *       "following": [
       *         "user5",
       *         "user4"
       *       ],
       *       "givenName": "Albert",
       *       "familyName": "Einstein",
       *       "savedTrips": [
       *         {
       *           "id": "60f5e7b3b7b3f3001d1f3e3d",
       *           "name": "Summer Vacations",
       *           "trips": [
       *             {
       *               "id": "60f5e7b3b7b3f3001d1f3e3d",
       *               "name": "A summer trip to the beach",
       *               "duration": "medium",
       *               "description": "A complete week of fun and relaxation at the beach.",
       *               "thumbnail": "https://example.com/image.jpg",
       *               "moods": [
       *                 "party"
       *               ],
       *               "budget": "low",
       *               "purposes": [
       *                 "alone",
       *                 "party"
       *               ],
       *               "travelers": [
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "John Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 },
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "Jane Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 }
       *               ]
       *             }
       *           ]
       *         }
       *       ]
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileDetailsDto"];
        };
      };
    };
  };
  SavedTripsController_listSavedTripFolders: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description Profile updated
       * @example [
       *       {
       *         "id": "60f5e7b3b7b3f3001d1f3e3d",
       *         "name": "Summer Vacations",
       *         "trips": [
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "name": "A summer trip to the beach",
       *             "duration": "medium",
       *             "description": "A complete week of fun and relaxation at the beach.",
       *             "thumbnail": "https://example.com/image.jpg",
       *             "moods": [
       *               "party"
       *             ],
       *             "budget": "low",
       *             "purposes": [
       *               "alone",
       *               "party"
       *             ],
       *             "travelers": [
       *               {
       *                 "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "username": "John Doe",
       *                 "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "avatar": "https://example.com/avatar.jpg"
       *               },
       *               {
       *                 "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "username": "Jane Doe",
       *                 "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "avatar": "https://example.com/avatar.jpg"
       *               }
       *             ]
       *           }
       *         ]
       *       }
       *     ]
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SavedTripDto"];
        };
      };
    };
  };
  SavedTripsController_deleteSavedTripFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        folderId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description Profile updated
       * @example {
       *       "id": "60f7b3b3b3f1f3001f9e4b3b",
       *       "bio": "I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.",
       *       "avatar": "",
       *       "followers": [
       *         "user1",
       *         "user2",
       *         "user3"
       *       ],
       *       "following": [
       *         "user5",
       *         "user4"
       *       ],
       *       "givenName": "Albert",
       *       "familyName": "Einstein",
       *       "savedTrips": [
       *         {
       *           "id": "60f5e7b3b7b3f3001d1f3e3d",
       *           "name": "Summer Vacations",
       *           "trips": [
       *             {
       *               "id": "60f5e7b3b7b3f3001d1f3e3d",
       *               "name": "A summer trip to the beach",
       *               "duration": "medium",
       *               "description": "A complete week of fun and relaxation at the beach.",
       *               "thumbnail": "https://example.com/image.jpg",
       *               "moods": [
       *                 "party"
       *               ],
       *               "budget": "low",
       *               "purposes": [
       *                 "alone",
       *                 "party"
       *               ],
       *               "travelers": [
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "John Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 },
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "Jane Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 }
       *               ]
       *             }
       *           ]
       *         }
       *       ]
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileDetailsDto"];
        };
      };
    };
  };
  SavedTripsController_createSavedTripFolder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSavedTripFolderDto"];
      };
    };
    responses: {
      /**
       * @description Profile updated
       * @example {
       *       "id": "60f7b3b3b3f1f3001f9e4b3b",
       *       "bio": "I'm Albert and I love to travel around the world. I'm a software engineer and I love to code.",
       *       "avatar": "",
       *       "followers": [
       *         "user1",
       *         "user2",
       *         "user3"
       *       ],
       *       "following": [
       *         "user5",
       *         "user4"
       *       ],
       *       "givenName": "Albert",
       *       "familyName": "Einstein",
       *       "savedTrips": [
       *         {
       *           "id": "60f5e7b3b7b3f3001d1f3e3d",
       *           "name": "Summer Vacations",
       *           "trips": [
       *             {
       *               "id": "60f5e7b3b7b3f3001d1f3e3d",
       *               "name": "A summer trip to the beach",
       *               "duration": "medium",
       *               "description": "A complete week of fun and relaxation at the beach.",
       *               "thumbnail": "https://example.com/image.jpg",
       *               "moods": [
       *                 "party"
       *               ],
       *               "budget": "low",
       *               "purposes": [
       *                 "alone",
       *                 "party"
       *               ],
       *               "travelers": [
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "John Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 },
       *                 {
       *                   "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "username": "Jane Doe",
       *                   "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                   "avatar": "https://example.com/avatar.jpg"
       *                 }
       *               ]
       *             }
       *           ]
       *         }
       *       ]
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileDetailsDto"];
        };
      };
    };
  };
  SavedTripsController_listMineSavedTripFolders: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description Profile updated
       * @example [
       *       {
       *         "id": "60f5e7b3b7b3f3001d1f3e3d",
       *         "name": "Summer Vacations",
       *         "trips": [
       *           {
       *             "id": "60f5e7b3b7b3f3001d1f3e3d",
       *             "name": "A summer trip to the beach",
       *             "duration": "medium",
       *             "description": "A complete week of fun and relaxation at the beach.",
       *             "thumbnail": "https://example.com/image.jpg",
       *             "moods": [
       *               "party"
       *             ],
       *             "budget": "low",
       *             "purposes": [
       *               "alone",
       *               "party"
       *             ],
       *             "travelers": [
       *               {
       *                 "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "username": "John Doe",
       *                 "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "avatar": "https://example.com/avatar.jpg"
       *               },
       *               {
       *                 "id": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "username": "Jane Doe",
       *                 "profileId": "60f5e7b3b7b3f3001d1f3e3d",
       *                 "avatar": "https://example.com/avatar.jpg"
       *               }
       *             ]
       *           }
       *         ]
       *       }
       *     ]
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SavedTripDto"][];
        };
      };
    };
  };
  TemporalTokenController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTemporalTokenDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TemporalTokenController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TemporalTokenController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTemporalTokenDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TripController_getAll: {
    parameters: {
      query?: {
        /** @description Array of possible budgets to filter trips, made for multiple selection. */
        budgets?: PathsApiV1TripGetParametersQueryBudgets[];
        /** @description Array of possible duration to filter trips */
        durations?: PathsApiV1TripGetParametersQueryDurations[];
        /** @description End date for filtering users */
        endDate?: string;
        /** @description Type of mood, experience user is looking for with the trip. */
        moods?: PathsApiV1TripGetParametersQueryMoods[];
        /**
         * @description Array of fields to order by with their respective order (field:order).
         * @example [
         *       "createdAt:DESC"
         *     ]
         */
        orderBy?: string[];
        /** @description Page number */
        page?: number;
        /** @description Array of possible purposes to filter trips */
        purposes?: PathsApiV1TripGetParametersQueryPurposes[];
        /** @description Search keyword for fields */
        search?: string;
        /** @description Start date for filtering users */
        startDate?: string;
        /** @description Number of items per page */
        take?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully received model list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data?: components["schemas"]["TripInListDto"][];
          };
        };
      };
    };
  };
  TripController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTripDto"];
      };
    };
    responses: {
      /**
       * @description The trip has been successfully created.
       * @example {
       *       "id": "6695aebd76dcb559c2f56d17",
       *       "name": "A summer trip to the beach",
       *       "description": "A complete week of fun and relaxation at the beach.",
       *       "thumbnail": "https://example.com/image.jpg",
       *       "createdAt": "2024-08-19T15:31:53.732Z",
       *       "updatedAt": "2024-08-19T15:31:53.732Z",
       *       "expenses": [],
       *       "createdBy": {
       *         "id": "6695aebd76dcb559c2f56d17",
       *         "username": "John Doe",
       *         "profileId": "6695aebd76dcb559c2f56d17",
       *         "avatar": "https://example.com/avatar.jpg"
       *       },
       *       "days": [
       *         {
       *           "name": "Day 1",
       *           "description": "",
       *           "date": "2024-06-01T00:00:00.000Z",
       *           "createdAt": "2024-06-01T00:00:00.000Z",
       *           "updatedAt": "2024-06-01T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 1",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [],
       *               "dateTime": "2024-06-01T07:30:00.000Z",
       *               "expenses": []
       *             },
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         },
       *         {
       *           "name": "Day 2",
       *           "description": "A day to relax and enjoy the beach.",
       *           "date": "2024-06-02T00:00:00.000Z",
       *           "createdAt": "2024-06-02T00:00:00.000Z",
       *           "updatedAt": "2024-06-02T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         }
       *       ],
       *       "moods": [
       *         "adventure"
       *       ],
       *       "purposes": [
       *         "romantic"
       *       ],
       *       "budget": "affordable",
       *       "duration": "short",
       *       "logistics": [
       *         "camper"
       *       ],
       *       "travelers": [],
       *       "areYouMember": true,
       *       "public": true,
       *       "active": true
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TripDetailsDto"];
        };
      };
    };
  };
  TripUserController_addParticipant: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tripId: string;
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TripUserController_addMeToTrip: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tripId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TripUserController_removeParticipant: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tripId: string;
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TripUserController_getTripsByUserId: {
    parameters: {
      query?: {
        /** @description End date for filtering users */
        endDate?: string;
        /**
         * @description Array of fields to order by with their respective order (field:order).
         * @example [
         *       "createdAt:DESC"
         *     ]
         */
        orderBy?: string[];
        /** @description Page number */
        page?: number;
        /** @description Search keyword for fields */
        search?: string;
        /** @description Start date for filtering users */
        startDate?: string;
        /** @description Number of items per page */
        take?: number;
      };
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully received model list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data?: components["schemas"]["TripInListDto"][];
          };
        };
      };
    };
  };
  TripUserController_getMyTrips: {
    parameters: {
      query?: {
        /** @description End date for filtering users */
        endDate?: string;
        /**
         * @description Array of fields to order by with their respective order (field:order).
         * @example [
         *       "createdAt:DESC"
         *     ]
         */
        orderBy?: string[];
        /** @description Page number */
        page?: number;
        /** @description Search keyword for fields */
        search?: string;
        /** @description Start date for filtering users */
        startDate?: string;
        /** @description Number of items per page */
        take?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully received model list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data?: components["schemas"]["TripInListDto"][];
          };
        };
      };
    };
  };
  TripController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description The trip has been successfully found.
       * @example {
       *       "id": "6695aebd76dcb559c2f56d17",
       *       "name": "A summer trip to the beach",
       *       "description": "A complete week of fun and relaxation at the beach.",
       *       "thumbnail": "https://example.com/image.jpg",
       *       "createdAt": "2024-08-19T15:31:53.732Z",
       *       "updatedAt": "2024-08-19T15:31:53.732Z",
       *       "expenses": [],
       *       "createdBy": {
       *         "id": "6695aebd76dcb559c2f56d17",
       *         "username": "John Doe",
       *         "profileId": "6695aebd76dcb559c2f56d17",
       *         "avatar": "https://example.com/avatar.jpg"
       *       },
       *       "days": [
       *         {
       *           "name": "Day 1",
       *           "description": "",
       *           "date": "2024-06-01T00:00:00.000Z",
       *           "createdAt": "2024-06-01T00:00:00.000Z",
       *           "updatedAt": "2024-06-01T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 1",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [],
       *               "dateTime": "2024-06-01T07:30:00.000Z",
       *               "expenses": []
       *             },
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         },
       *         {
       *           "name": "Day 2",
       *           "description": "A day to relax and enjoy the beach.",
       *           "date": "2024-06-02T00:00:00.000Z",
       *           "createdAt": "2024-06-02T00:00:00.000Z",
       *           "updatedAt": "2024-06-02T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         }
       *       ],
       *       "moods": [
       *         "adventure"
       *       ],
       *       "purposes": [
       *         "romantic"
       *       ],
       *       "budget": "affordable",
       *       "duration": "short",
       *       "logistics": [
       *         "camper"
       *       ],
       *       "travelers": [],
       *       "areYouMember": true,
       *       "public": true,
       *       "active": true
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TripDetailsDto"];
        };
      };
    };
  };
  TripController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description The trip has been successfully created.
       * @example {
       *       "name": "A summer trip to the beach",
       *       "description": "A complete week of fun and relaxation at the beach.",
       *       "startDate": "2024-06-01T00:00:00.000Z",
       *       "endDate": "2024-06-10T00:00:00.000Z",
       *       "travelers": [],
       *       "expenses": [],
       *       "moods": [
       *         "adventure"
       *       ],
       *       "purposes": [
       *         "romantic"
       *       ],
       *       "logistics": [
       *         "camper"
       *       ],
       *       "thumbnail": null,
       *       "budget": "affordable"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TripInListDto"];
        };
      };
    };
  };
  TripController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTripDto"];
      };
    };
    responses: {
      /**
       * @description The trip has been successfully updated.
       * @example {
       *       "id": "6695aebd76dcb559c2f56d17",
       *       "name": "A summer trip to the beach",
       *       "description": "A complete week of fun and relaxation at the beach.",
       *       "thumbnail": "https://example.com/image.jpg",
       *       "createdAt": "2024-08-19T15:31:53.732Z",
       *       "updatedAt": "2024-08-19T15:31:53.732Z",
       *       "expenses": [],
       *       "createdBy": {
       *         "id": "6695aebd76dcb559c2f56d17",
       *         "username": "John Doe",
       *         "profileId": "6695aebd76dcb559c2f56d17",
       *         "avatar": "https://example.com/avatar.jpg"
       *       },
       *       "days": [
       *         {
       *           "name": "Day 1",
       *           "description": "",
       *           "date": "2024-06-01T00:00:00.000Z",
       *           "createdAt": "2024-06-01T00:00:00.000Z",
       *           "updatedAt": "2024-06-01T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 1",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [],
       *               "dateTime": "2024-06-01T07:30:00.000Z",
       *               "expenses": []
       *             },
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         },
       *         {
       *           "name": "Day 2",
       *           "description": "A day to relax and enjoy the beach.",
       *           "date": "2024-06-02T00:00:00.000Z",
       *           "createdAt": "2024-06-02T00:00:00.000Z",
       *           "updatedAt": "2024-06-02T00:00:00.000Z",
       *           "events": [
       *             {
       *               "name": "Event 2",
       *               "description": "Description of the event",
       *               "createdAt": "2024-06-01T00:00:00.000Z",
       *               "rating": 5,
       *               "updatedAt": "2024-06-01T00:00:00.000Z",
       *               "activities": [],
       *               "categories": [
       *                 "FOOD",
       *                 "LODGING"
       *               ],
       *               "attachments": [
       *                 {
       *                   "filename": "summercat",
       *                   "url": "https://www.google.com",
       *                   "mimetype": ".jpeg",
       *                   "size": 17000,
       *                   "isFavorite": true,
       *                   "createdAt": "2024-08-19T15:31:53.720Z",
       *                   "updatedAt": "2024-08-19T15:31:53.720Z"
       *                 }
       *               ],
       *               "dateTime": "2024-06-01T14:37:00.000Z",
       *               "expenses": []
       *             }
       *           ]
       *         }
       *       ],
       *       "moods": [
       *         "adventure"
       *       ],
       *       "purposes": [
       *         "romantic"
       *       ],
       *       "budget": "affordable",
       *       "duration": "short",
       *       "logistics": [
       *         "camper"
       *       ],
       *       "travelers": [],
       *       "areYouMember": true,
       *       "public": true,
       *       "active": true
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TripDetailsDto"];
        };
      };
    };
  };
  UserController_getUsers: {
    parameters: {
      query?: {
        /** @description End date for filtering users */
        endDate?: string;
        /**
         * @description Array of fields to order by with their respective order (field:order).
         * @example [
         *       "createdAt:DESC"
         *     ]
         */
        orderBy?: string[];
        /** @description Page number */
        page?: number;
        /** @description Search keyword for fields */
        search?: string;
        /** @description Start date for filtering users */
        startDate?: string;
        /** @description Number of items per page */
        take?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully received model list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data?: components["schemas"]["UserInListDto"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthorized */
            error?: string;
            /** @example Unauthorized */
            message?: string;
            /** @example 401 */
            statusCode?: number;
          };
        };
      };
    };
  };
  UserController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /**
       * @description User created
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "username must be longer than or equal to 4 characters",
       *         "username should not be empty",
       *         "email must be longer than or equal to 5 characters"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  UserController_findOneUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description User found
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "Invalid ID"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  UserController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description User deleted successfully
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "Invalid ID"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  UserController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      /**
       * @description User created
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "username must be longer than or equal to 4 characters"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  UserController_findOneWithProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /**
       * @description User found
       * @example {
       *       "id": "60f5e7b3b7b3f3001d1f3e3d",
       *       "username": "testuser",
       *       "email": "testuser@email.com",
       *       "roles": [
       *         "user"
       *       ],
       *       "emailVerified": null,
       *       "createdAt": "2021-07-19T15:33:07.000Z",
       *       "updatedAt": "2021-07-19T15:33:07.000Z"
       *     }
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /**
       * @description Bad Request
       * @example {
       *       "message": [
       *         "Invalid ID"
       *       ],
       *       "error": "Bad Request",
       *       "statusCode": 400
       *     }
       */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  UserController_findOneRaw: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_checkIfUsernameExists: {
    parameters: {
      query: {
        user: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
    };
  };
  UserController_findMineUserWithProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User profile found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetailsDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  UserController_createMultiple: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ValidateEmailController_updateVerifyEmail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        token: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ValidateEmailController_request: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
export enum PathsApiV1TripGetParametersQueryBudgets {
  low = "low",
  affordable = "affordable",
  expensive = "expensive",
  luxury = "luxury",
}
export enum PathsApiV1TripGetParametersQueryDurations {
  short = "short",
  medium = "medium",
  long = "long",
  extended = "extended",
}
export enum PathsApiV1TripGetParametersQueryMoods {
  relax = "relax",
  adventure = "adventure",
  nature = "nature",
  culture = "culture",
  city = "city",
  beach = "beach",
  party = "party",
}
export enum PathsApiV1TripGetParametersQueryPurposes {
  family = "family",
  friends = "friends",
  romantic = "romantic",
  alone = "alone",
  business = "business",
  party = "party",
}
export enum CreateTripDtoMoods {
  relax = "relax",
  adventure = "adventure",
  nature = "nature",
  culture = "culture",
  city = "city",
  beach = "beach",
  party = "party",
}
export enum CreateTripDtoPurposes {
  family = "family",
  friends = "friends",
  romantic = "romantic",
  alone = "alone",
  business = "business",
  party = "party",
}
export enum TripDetailsDtoMoods {
  relax = "relax",
  adventure = "adventure",
  nature = "nature",
  culture = "culture",
  city = "city",
  beach = "beach",
  party = "party",
}
export enum TripDetailsDtoPurposes {
  family = "family",
  friends = "friends",
  romantic = "romantic",
  alone = "alone",
  business = "business",
  party = "party",
}
export enum TripInListDtoMoods {
  relax = "relax",
  adventure = "adventure",
  nature = "nature",
  culture = "culture",
  city = "city",
  beach = "beach",
  party = "party",
}
export enum TripInListDtoPurposes {
  family = "family",
  friends = "friends",
  romantic = "romantic",
  alone = "alone",
  business = "business",
  party = "party",
}
export enum UpdateTripDtoMoods {
  relax = "relax",
  adventure = "adventure",
  nature = "nature",
  culture = "culture",
  city = "city",
  beach = "beach",
  party = "party",
}
export enum UpdateTripDtoPurposes {
  family = "family",
  friends = "friends",
  romantic = "romantic",
  alone = "alone",
  business = "business",
  party = "party",
}
export enum UserDetailsDtoRoles {
  user = "user",
  admin = "admin",
}
